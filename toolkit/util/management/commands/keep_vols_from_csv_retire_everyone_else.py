"""
Invoke with
python manage.py keep_vols_from_csv_retire_everyone_else

CSV file is generated by a wagtale form, containing the fields

Submission date,Name,email,Comments
2020-06-30 20:59:27+00:00,Marcus Valentine,marcus@cubecinema.com,Hello

"""

import csv
from datetime import datetime
from django.core.management.base import BaseCommand, CommandError

from toolkit.members.models import Volunteer

# CSV file needs to be in same directory as manage.py
FILENAME = "export.csv"


def load_data(filename):
    data = []
    with open(filename, "rt") as f:
        reader = csv.reader(f)
        for row in reader:
            if len(row) >= 3:
                data.append(row)
    return data


class Command(BaseCommand):
    help = "Keep the volunteers from the associated CSV, retire everyone else"

    def add_arguments(self, parser):
        # Named (optional) arguments
        parser.add_argument(
            "--dry-run",
            action="store_true",
            dest="dryRun",
            default=False,
            help="Simulate - don't touch the database",
        )

    def try_get_volunteer_by_name(self, name):
        try:
            return Volunteer.objects.get(member__name__iexact=name)
        except Volunteer.MultipleObjectsReturned:
            self.stdout.write(
                self.style.WARNING(
                    "Multiple volunteers with the same name: {0}".format(name)
                )
            )
            return None
        except Volunteer.DoesNotExist:
            return None

    def try_get_volunteer_by_email(self, email):
        try:
            return Volunteer.objects.get(member__email__iexact=email)
        except Volunteer.MultipleObjectsReturned:
            self.stdout.write(
                self.style.WARNING(
                    "Multiple volunteers with the same email address: %s"
                    % email
                )
            )
        except Volunteer.DoesNotExist:
            pass
        return None

    def handle(self, *args, **options):

        now = datetime.now().strftime("%d %B %Y")
        dateStr = "\n\n%s:\n" % now
        retireStr = "Bulk retired %s" % now

        if options["dryRun"]:
            verb = "Would"
        else:
            verb = "Will"

        self.stdout.write("Trying to read {0}".format(FILENAME))
        desired_vols = load_data(FILENAME)
        self.stdout.write(
            self.style.SUCCESS("Loaded %d volunteers\n" % len(desired_vols))
        )

        volsToRetire = Volunteer.objects.filter(active=True).order_by(
            "member__name"
        )

        self.stdout.write(
            self.style.SUCCESS(
                "\nBeginning with %d active volunteers" % len(volsToRetire)
            )
        )

        for idx, vol in enumerate(desired_vols):
            if idx == 0:
                continue  # Skip header row
            self.stdout.write("\n%s <%s>" % (vol[1], vol[2]))
            matched_vol = self.try_get_volunteer_by_email(vol[2])
            if matched_vol:
                self.stdout.write(
                    self.style.SUCCESS("Matching email %s found" % vol[2])
                )
                volsToRetire = volsToRetire.exclude(
                    member__volunteer=matched_vol
                )
            if not matched_vol:
                matched_vol = self.try_get_volunteer_by_name(vol[1])
                if matched_vol:
                    self.stdout.write(
                        self.style.SUCCESS("Matching name %s found" % vol[1])
                    )
                    volsToRetire = volsToRetire.exclude(
                        member__volunteer=matched_vol
                    )
            if matched_vol:
                comments = vol[3]
                if comments:
                    self.stdout.write("*** Existing notes ***")
                    self.stdout.write(matched_vol.member.volunteer.notes)
                    self.stdout.write("*** Additional notes ***")
                    self.stdout.write(comments)
                    matched_vol.member.volunteer.notes = (
                        matched_vol.member.volunteer.notes + dateStr + comments
                    )
                    if not options["dryRun"]:
                        matched_vol.save()
            else:
                self.stdout.write(
                    self.style.WARNING(
                        "Confusing situation with regard to %s <%s>"
                        % (vol[1], vol[2])
                    )
                )

        self.stdout.write(
            self.style.WARNING(
                "\n%s be retiring the following %d volunteers\n"
                % (verb, len(volsToRetire))
            )
        )

        for vol in volsToRetire:
            self.stdout.write("%s <%s>" % (vol.member.name, vol.member.email))
            if not options["dryRun"]:
                if vol.member.volunteer.notes:
                    seperator = "\n\n"
                else:
                    seperator = ""
                vol.member.volunteer.notes = (
                    vol.member.volunteer.notes + seperator + retireStr
                )
                vol.active = False
                vol.save()
        self.stdout.write("\n")
